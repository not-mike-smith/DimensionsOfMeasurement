<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Core" #>
<#+
    #nullable enable
    public class UnitSchema
    {
        public string Name { get; set; } = "";
        public string? Dimensionality { get; set; }
        public string? Symbol { get; set; }
        public string? SiPrefix { get; set; }
        public string? Unit { get; set; }
        public double? Factor { get; set; }
        public List<ConstituentUnit>? From { get; set; }

        public bool UseSimpleCreation => Has(Dimensionality) && Has(Symbol) && Has(Factor);
        public bool UseSiPrefixCreation => Has(SiPrefix) && Has(Unit);
        public bool UseScalingCreation => Has(Unit) && Has(Symbol) && Has(Factor);
        public bool UseConstituentUnitWithSymbolCreation => Has(From) && Has(Symbol);
        public bool UseConstituentUnitSansSymbolCreation => Has(From);

        private bool Has(string? s)
        {
            return !string.IsNullOrWhiteSpace(s);
        }

        private bool Has(double? d)
        {
            return d.HasValue;
        }

        private bool Has(List<ConstituentUnit>? list)
        {
            return list != null && list.Count > 0;
        }
    }

    public class ConstituentUnit
    {
        public string Name { get; set; } = "";
        public int Exponent { get; set; }
    }

    public class CodeWriter
    {
        private const string S = "\t\tpublic static readonly UnitOfMeasure";
        private const string C = " = UnitFactory.Create";
        private const string T = "\t\t\t";

        public static string WriteLine(UnitSchema u)
        {
            if (u.UseSimpleCreation)
            {
                return $"{S} {u.Name} {C}({u.Dimensionality}, \"{u.Symbol}\", {u.Factor});";
            }

            if (u.UseScalingCreation)
            {
                return $"{S} {u.Name} {C}({u.Unit}, \"{u.Symbol}\", {u.Factor});";
            }

            if (u.UseSiPrefixCreation)
            {
                return $"{S} {u.Name} {C}(\"{u.SiPrefix}\", {u.Unit});";
            }

            if (u.UseConstituentUnitWithSymbolCreation)
            {
                var constituentUnits = u.From.Select(x =>
                    $"({x.Name}, {x.Exponent})");

                var constituentUnitArgs = string.Join($",\n{T}", constituentUnits);
                var s = $"{S} {u.Name} {C}(\n" +
                        $"{T}\"{u.Symbol}\",\n" +
                        $"{T}{constituentUnitArgs});";
            }

            if (u.UseConstituentUnitSansSymbolCreation)
            {
                var constituentUnits = u.From.Select(x =>
                    $"({x.Name}, {x.Exponent})");

                var constituentUnitArgs = string.Join($",\n{T}", constituentUnits);
                var s = $"{S} {u.Name} {C}(\n" +
                        $"{T}{constituentUnitArgs});";
            }

            return $"\t\t// Could not parse {u.Name}";
        }
    }
#>
